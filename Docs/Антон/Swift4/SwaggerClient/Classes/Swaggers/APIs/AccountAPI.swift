//
// AccountAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class AccountAPI {
    /**
     Разлогиниться в системе
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func logOut(completion: @escaping ((_ data: BaseApiResponse?,_ error: Error?) -> Void)) {
        logOutWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Разлогиниться в системе
     - POST /Api/Account/LogOut
     - examples: [{contentType=application/json, example={
  "IsSucceeded" : true,
  "Message" : "Message"
}}]

     - returns: RequestBuilder<BaseApiResponse> 
     */
    open class func logOutWithRequestBuilder() -> RequestBuilder<BaseApiResponse> {
        let path = "/Api/Account/LogOut"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BaseApiResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Войти по Email
     
     - parameter email: (form)  
     - parameter password: (form)  
     - parameter rememberMe: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func login(email: String, password: String, rememberMe: Bool? = nil, completion: @escaping ((_ data: BaseApiResponseLoginResultModel?,_ error: Error?) -> Void)) {
        loginWithRequestBuilder(email: email, password: password, rememberMe: rememberMe).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Войти по Email
     - POST /Api/Account/Login/ByEmail
     - examples: [{contentType=application/json, example={
  "IsSucceeded" : true,
  "Message" : "Message",
  "ResponseObject" : {
    "TokenId" : "TokenId",
    "Result" : "Error"
  }
}}]
     
     - parameter email: (form)  
     - parameter password: (form)  
     - parameter rememberMe: (form)  (optional)

     - returns: RequestBuilder<BaseApiResponseLoginResultModel> 
     */
    open class func loginWithRequestBuilder(email: String, password: String, rememberMe: Bool? = nil) -> RequestBuilder<BaseApiResponseLoginResultModel> {
        let path = "/Api/Account/Login/ByEmail"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "Email": email,
            "Password": password,
            "RememberMe": rememberMe
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BaseApiResponseLoginResultModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Войти по номеру телефона
     
     - parameter phoneNumber: (form)  
     - parameter password: (form)  
     - parameter rememberMe: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func loginByPhone(phoneNumber: String, password: String, rememberMe: Bool? = nil, completion: @escaping ((_ data: BaseApiResponseLoginResultModel?,_ error: Error?) -> Void)) {
        loginByPhoneWithRequestBuilder(phoneNumber: phoneNumber, password: password, rememberMe: rememberMe).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Войти по номеру телефона
     - POST /Api/Account/Login/ByPhone
     - examples: [{contentType=application/json, example={
  "IsSucceeded" : true,
  "Message" : "Message",
  "ResponseObject" : {
    "TokenId" : "TokenId",
    "Result" : "Error"
  }
}}]
     
     - parameter phoneNumber: (form)  
     - parameter password: (form)  
     - parameter rememberMe: (form)  (optional)

     - returns: RequestBuilder<BaseApiResponseLoginResultModel> 
     */
    open class func loginByPhoneWithRequestBuilder(phoneNumber: String, password: String, rememberMe: Bool? = nil) -> RequestBuilder<BaseApiResponseLoginResultModel> {
        let path = "/Api/Account/Login/ByPhone"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "PhoneNumber": phoneNumber,
            "Password": password,
            "RememberMe": rememberMe
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BaseApiResponseLoginResultModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Зарегистрироваться
     
     - parameter email: (form)  
     - parameter password: (form)  
     - parameter phoneNumber: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func register(email: String, password: String, phoneNumber: String? = nil, completion: @escaping ((_ data: BaseApiResponseClientModel?,_ error: Error?) -> Void)) {
        registerWithRequestBuilder(email: email, password: password, phoneNumber: phoneNumber).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Зарегистрироваться
     - POST /Api/Account/Register
     - examples: [{contentType=application/json, example={
  "IsSucceeded" : true,
  "Message" : "Message",
  "ResponseObject" : {
    "Email" : "Email",
    "PhoneNumber" : "PhoneNumber",
    "Id" : "Id"
  }
}}]
     
     - parameter email: (form)  
     - parameter password: (form)  
     - parameter phoneNumber: (form)  (optional)

     - returns: RequestBuilder<BaseApiResponseClientModel> 
     */
    open class func registerWithRequestBuilder(email: String, password: String, phoneNumber: String? = nil) -> RequestBuilder<BaseApiResponseClientModel> {
        let path = "/Api/Account/Register"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "Email": email,
            "PhoneNumber": phoneNumber,
            "Password": password
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BaseApiResponseClientModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Зарегистрироваться и войти
     
     - parameter email: (form)  
     - parameter password: (form)  
     - parameter phoneNumber: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func registerAndSignIn(email: String, password: String, phoneNumber: String? = nil, completion: @escaping ((_ data: BaseApiResponseClientModel?,_ error: Error?) -> Void)) {
        registerAndSignInWithRequestBuilder(email: email, password: password, phoneNumber: phoneNumber).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Зарегистрироваться и войти
     - POST /Api/Account/RegisterAndSignIn
     - examples: [{contentType=application/json, example={
  "IsSucceeded" : true,
  "Message" : "Message",
  "ResponseObject" : {
    "Email" : "Email",
    "PhoneNumber" : "PhoneNumber",
    "Id" : "Id"
  }
}}]
     
     - parameter email: (form)  
     - parameter password: (form)  
     - parameter phoneNumber: (form)  (optional)

     - returns: RequestBuilder<BaseApiResponseClientModel> 
     */
    open class func registerAndSignInWithRequestBuilder(email: String, password: String, phoneNumber: String? = nil) -> RequestBuilder<BaseApiResponseClientModel> {
        let path = "/Api/Account/RegisterAndSignIn"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "Email": email,
            "PhoneNumber": phoneNumber,
            "Password": password
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BaseApiResponseClientModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
